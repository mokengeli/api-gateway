session:
  cache:
    ttl-seconds: 120

authentication:
  service-id: authentication-service

server:
  port: 8081
  forward-headers-strategy: framework
  netty:
    # Timeout plus long pour WebSocket
    idle-timeout: PT120S  # Augmenté pour WebSocket

security:
  cors:
    allowed-origins: http://localhost:3000,http://localhost:3001,https://hideously-smart-llama.ngrok-free.app
    mobile-patterns: exp://*,exps://*,capacitor://localhost,ionic://localhost,http://127.0.0.1:*,http://10.0.2.2:*,http://192.168.*:*
  jwt:
    secret: 9a4f2c_8d3b7a1e6f#45c8a0b3f268b1d4e6-f3c8a9d2b5f8e3a9c8-b5f6v8a3d9A@
    cookie:
      access-token: "accessToken"

spring:
  application:
    name: api-gateway
  jpa:
    properties:
      hibernate:
        jdbc:
          time_zone: GMT+01:00
  jackson:
    time-zone: GMT+01:00
  cloud:
    gateway:
      # Configuration globale
      globalcors:
        # Désactivé car géré par CorsGlobalConfiguration
        enabled: false
      forwarded:
        enabled: true

      # Routes - ORDRE CRITIQUE: WebSocket AVANT les routes standard
      routes:
        # =============================================================================
        # ROUTE 1: WebSocket NATIF pour Order Service (NOUVEAU)
        # =============================================================================
        - id: order-service-websocket-native
          uri: lb:ws://order-service  # lb:ws:// pour load balancing WebSocket
          predicates:
            - Path=/api/order/ws/websocket
          filters:
            # Préserver tous les headers pour WebSocket
            - PreserveHostHeader

        # =============================================================================
        # ROUTE 2: SockJS Legacy pour Order Service (TEMPORAIRE)
        # =============================================================================
        - id: order-service-sockjs
          uri: lb:ws://order-service
          predicates:
            - Path=/api/order/ws/**
            # Exclure le path natif
            - name: Query
              args:
                param: sockjs
          filters:
            - PreserveHostHeader

        # =============================================================================
        # ROUTE 3: HTTP Standard pour Order Service
        # =============================================================================
        - id: order-service-http
          uri: lb://order-service
          predicates:
            - Path=/api/order/**


        # =============================================================================
        # AUTRES SERVICES (HTTP uniquement)
        # =============================================================================
        - id: inventory-service
          uri: lb://inventory-service
          predicates:
            - Path=/api/inventory/**

        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/user/**

        - id: authentication-service
          uri: lb://authentication-service
          predicates:
            - Path=/api/auth/**

      # Configuration HTTP Client pour WebSocket - CRITIQUE
      httpclient:
        # Configuration WebSocket
        websocket:
          # Taille max des frames WebSocket (1MB)
          max-frame-payload-length: 1048576
          # Proxy des pings WebSocket
          proxy-ping: false  # CHANGÉ: Laisser STOMP gérer les heartbeats
          # Sous-protocoles STOMP
          proxyWebsocketSubProtocols: true  # AJOUTÉ: Proxy les sous-protocoles
        # Pool de connexions
        pool:
          type: elastic
          max-idle-time: 60s
          max-connections: 1000
          acquire-timeout: 45000  # 45 secondes en millisecondes
        # Timeouts
        connect-timeout: 10000   # 10 secondes en millisecondes
        response-timeout: 120s   # 120 secondes
        # Wiretap pour debug (désactiver en prod)
        wiretap: false  # CHANGÉ: Désactivé pour éviter les interférences
        # Compression désactivée pour WebSocket
        compression: false

      # Configuration des métriques
      metrics:
        enabled: true
        tags:
          path:
            enabled: true

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
    # Rafraîchissement plus fréquent pour WebSocket
    registry-fetch-interval-seconds: 5
  instance:
    # Heartbeat plus fréquent
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30
    prefer-ip-address: true
    # Métadonnées pour WebSocket
    metadata-map:
      websocket-enabled: true
      websocket-path: /api/order/ws/websocket

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway,routes
  endpoint:
    gateway:
      access: unrestricted
    routes:
      enabled: true

logging:
  level:
    # Réduire les logs pour éviter les interférences
    org.springframework.cloud.gateway: INFO
    org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping: INFO
    org.springframework.cloud.gateway.filter.factory: INFO
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: INFO
    org.springframework.web.reactive.socket: INFO
    reactor.netty: INFO
    reactor.netty.http.client: INFO
    reactor.netty.http.server: INFO
    reactor.netty.channel: INFO
    io.netty.handler.codec.http.websocketx: INFO
    com.bacos.mokengeli.biloko: DEBUG

# Timeouts Reactor Netty pour WebSocket
reactor:
  netty:
    pool:
      max-idle-time: 120000  # 2 minutes
      max-life-time: 600000  # 10 minutes
    http:
      server:
        # Désactiver la compression pour WebSocket
        compression: false

# Paths publics
gateway:
  public-paths: /public/**, /api/auth/login, /api/order/ws/test, /api/order/ws/status