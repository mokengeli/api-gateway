session:
  cache:
    ttl-seconds: ${SESSION_CACHE_TTL:120}

authentication:
  service-id: authentication-service

server:
  port: ${SERVER_PORT}
  forward-headers-strategy: framework
  netty:
    # Timeout plus long pour WebSocket et Socket.io
    idle-timeout: ${WEBSOCKET_IDLE_TIMEOUT:PT120S}

security:
  cors:
    allowed-origins: ${ALLOWED_ORIGINS}
    mobile-patterns: ${MOBILE_PATTERNS}
  jwt:
    secret: ${JWT_SECRET}
    cookie:
      access-token: "accessToken"

spring:
  application:
    name: api-gateway
  jpa:
    properties:
      hibernate:
        jdbc:
          time_zone: ${TIME_ZONE:GMT+01:00}
  jackson:
    time-zone: ${TIME_ZONE:GMT+01:00}
  cloud:
    gateway:
      # Configuration globale
      globalcors:
        # Désactivé car géré par CorsGlobalConfiguration
        enabled: false
      forwarded:
        enabled: true

      # Désactiver la découverte automatique des routes
      discovery:
        locator:
          enabled: false

      # Routes - ORDRE CRITIQUE: Socket.io AVANT WebSocket AVANT HTTP
      routes:
        # =============================================================================
        # ROUTE 1: Socket.io Transport direct (WebSocket + Polling)
        # Path direct /socket.io/**
        # =============================================================================
        - id: order-service-socketio-direct
          uri: ${SOCKETIO_DIRECT_URL:http://order-service:9092}
          predicates:
            - Path=/socket.io/**
          filters:
            - PreserveHostHeader

        # =============================================================================
        # ROUTE 2: Socket.io avec préfixe API (WebSocket)
        # Path /api/order/socket.io/** pour WebSocket
        # =============================================================================
        - id: order-service-socketio-api-ws
          uri: ${SOCKETIO_DIRECT_URL:http://order-service:9092}
          predicates:
            - Path=/api/order/socket.io/**
            - Header=Upgrade, websocket
          filters:
            - PreserveHostHeader
            - RewritePath=/api/order/socket.io/(?<segment>.*), /socket.io/${segment}

        # =============================================================================
        # ROUTE 3: Socket.io avec préfixe API (Polling)
        # Path /api/order/socket.io/** pour HTTP polling
        # =============================================================================
        - id: order-service-socketio-api-polling
          uri: ${SOCKETIO_DIRECT_URL:http://order-service:9092}
          predicates:
            - Path=/api/order/socket.io/**
          filters:
            - PreserveHostHeader
            - RewritePath=/api/order/socket.io/(?<segment>.*), /socket.io/${segment}

        # =============================================================================
        # ROUTE 4: Endpoints de test Socket.io
        # =============================================================================
        - id: order-service-socketio-test
          uri: lb://order-service
          predicates:
            - Path=/api/order/socketio/**
          filters:
            - PreserveHostHeader

        # =============================================================================
        # ROUTE 5: WebSocket NATIF pour Order Service (STOMP legacy)
        # =============================================================================
        - id: order-service-websocket-native
          uri: lb:ws://order-service  # lb:ws:// pour load balancing WebSocket
          predicates:
            - Path=/api/order/ws/websocket
          filters:
            # Préserver tous les headers pour WebSocket
            - PreserveHostHeader

        # =============================================================================
        # ROUTE 6: SockJS Legacy pour Order Service
        # =============================================================================
        - id: order-service-sockjs
          uri: lb:ws://order-service
          predicates:
            - Path=/api/order/ws/**
            # Exclure le path natif
            - name: Query
              args:
                param: sockjs
          filters:
            - PreserveHostHeader

        # =============================================================================
        # ROUTE 7: HTTP Standard pour Order Service
        # =============================================================================
        - id: order-service-http
          uri: lb://order-service
          predicates:
            - Path=/api/order/**

        # =============================================================================
        # AUTRES SERVICES (HTTP uniquement)
        # =============================================================================
        - id: inventory-service
          uri: lb://inventory-service
          predicates:
            - Path=/api/inventory/**

        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/user/**

        - id: authentication-service
          uri: lb://authentication-service
          predicates:
            - Path=/api/auth/**

      # Configuration HTTP Client pour WebSocket et Socket.io - CRITIQUE
      httpclient:
        # Configuration WebSocket
        websocket:
          # Taille max des frames (Socket.io utilise des frames plus petites)
          max-frame-payload-length: ${SOCKETIO_MAX_FRAME_PAYLOAD_LENGTH:65536}  # 64KB
          # Proxy des pings WebSocket
          proxy-ping: false  # Laisser STOMP/Socket.io gérer les heartbeats
          # Sous-protocoles STOMP
          proxyWebsocketSubProtocols: true  # Proxy les sous-protocoles
        # Pool de connexions
        pool:
          type: elastic
          max-idle-time: ${SOCKETIO_MAX_IDLE_TIME:120s}
          max-connections: ${SOCKETIO_MAX_CONNECTIONS:1000}
          acquire-timeout: ${SOCKETIO_ACQUIRE_TIMEOUT:45000}  # 45 secondes en millisecondes
        # Timeouts
        connect-timeout: ${SOCKETIO_CONNECT_TIMEOUT:10000}   # 10 secondes en millisecondes
        response-timeout: ${SOCKETIO_RESPONSE_TIMEOUT:120s}   # 120 secondes
        # Wiretap pour debug (désactiver en prod)
        wiretap: ${SOCKETIO_WIRETAP:false}
        # Compression désactivée pour WebSocket et Socket.io
        compression: false

      # Configuration des métriques
      metrics:
        enabled: ${SOCKETIO_METRICS_ENABLED:true}
        tags:
          path:
            enabled: true

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL}
    fetch-registry: true
    register-with-eureka: true
    # Rafraîchissement plus fréquent pour WebSocket
    registry-fetch-interval-seconds: 5
  instance:
    # Heartbeat plus fréquent
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${random.uuid}
    # Métadonnées pour WebSocket et Socket.io
    metadata-map:
      websocket-enabled: true
      websocket-path: /api/order/ws/websocket
      socketio-enabled: true
      socketio-port: ${SOCKETIO_PORT:9092}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway,routes
  endpoint:
    gateway:
      access: unrestricted
      enabled: true
    routes:
      enabled: true

logging:
  level:
    # Réduire les logs pour éviter les interférences
    org.springframework.cloud.gateway: ${LOG_LEVEL:INFO}
    org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping: ${ROUTE_LOG_LEVEL:INFO}
    org.springframework.cloud.gateway.filter.factory: ${FILTER_LOG_LEVEL:INFO}
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: ${ROUTE_LOG_LEVEL:INFO}
    org.springframework.web.reactive.socket: ${WEBSOCKET_LOG_LEVEL:INFO}
    reactor.netty: ${NETTY_LOG_LEVEL:INFO}
    reactor.netty.http.client: ${NETTY_CLIENT_LOG_LEVEL:INFO}
    reactor.netty.http.server: ${NETTY_SERVER_LOG_LEVEL:INFO}
    reactor.netty.channel: ${NETTY_CHANNEL_LOG_LEVEL:INFO}
    io.netty.handler.codec.http.websocketx: ${WEBSOCKET_CODEC_LOG_LEVEL:INFO}
    com.bacos.mokengeli.biloko: ${APP_LOG_LEVEL:DEBUG}

# Timeouts Reactor Netty pour WebSocket et Socket.io
reactor:
  netty:
    pool:
      max-idle-time: ${NETTY_MAX_IDLE_TIME:120000}  # 2 minutes
      max-life-time: ${NETTY_MAX_LIFE_TIME:600000}  # 10 minutes
    http:
      server:
        # Désactiver la compression pour WebSocket et Socket.io
        compression: false

# Paths publics (incluant Socket.io)
gateway:
  public-paths: ${PUBLIC_PATHS:/public/**,/api/auth/login,/api/order/ws/test,/api/order/ws/status,/api/order/socketio/**,/socket.io/**}